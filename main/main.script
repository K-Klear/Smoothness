local INPUT = require("modules.input")

go.property("freq", 1)
go.property("RTX_on", true)
go.property("player_x", 1)
go.property("player_y", 1)


local base_step, jump_step = 8, 8
local size, margin = 48, 2
local freq_list = {64, 32, 16, 8, 4, 2, 1}

local function upd(self)
	local function is_passable(self, x, y)
		if x < 0 or x > 20 or y < 0 or y > 12 then
			return false
		else
			return tilemap.get_tile("world#tilemap", "layer", x, y) == 2
		end
	end
	local function get_step_up(self, big_step, x, y)
		local free = false
		for step = big_step, 1, -1 do
			if is_passable(self, x, y + step) then
				return step
			end
		end
	end
	local function get_step_down(self, big_step, x, y)
		local free = false
		for step = big_step, 1, -1 do
			if is_passable(self, x, y - step) then
				return step
			end
		end
	end
	local function get_step_left(self, big_step, x, y)
		local free = false
		for step = big_step, 1, -1 do
			if is_passable(self, x - step, y) then
				return step
			end
		end
	end
	local function get_step_right(self, big_step, x, y)
		local free = false
		for step = big_step, 1, -1 do
			if is_passable(self, x + step, y) then
				return step
			end
		end
	end
	local big_step = 1
	if freq_list[self.freq] == 2 then
		big_step = 2
	elseif freq_list[self.freq] == 1 then
		big_step = 4
	end
	if not self.moving then
		if INPUT.inputs[hash("up")] then
			local step = get_step_up(self, big_step, self.player_x, self.player_y)
			if step then self.moving = {x = 0, y = step} end
		elseif INPUT.inputs[hash("down")] then
			local step = get_step_down(self, big_step, self.player_x, self.player_y)
			if step then self.moving = {x = 0, y = -step} end
		elseif INPUT.inputs[hash("left")] then
			local step = get_step_left(self, big_step, self.player_x, self.player_y)
			if step then self.moving = {x = -step, y = 0} end
		elseif INPUT.inputs[hash("right")] then
			local step = get_step_right(self, big_step, self.player_x, self.player_y)
			if step then self.moving = {x = step, y = 0} end
		end
	end
	if self.moving then
		if not (freq_list[self.freq] < 4) then
			local pos = go.get_world_position()
			local target_x = ((self.player_x + self.moving.x) * 64) - 32
			local dist_x = math.abs(pos.x - target_x)
			local target_y = ((self.player_y + self.moving.y) * 64) - 32
			local dist_y = math.abs(pos.y - target_y)
			local step = 256 / freq_list[self.freq]
			go.set_position(vmath.vector3(pos.x + step * self.moving.x, pos.y + step * self.moving.y, 1))
			target_x = ((self.player_x + self.moving.x) * 64) - 32
			dist_x = math.abs(pos.x - target_x)
			target_y = ((self.player_y + self.moving.y) * 64) - 32
			dist_y = math.abs(pos.y - target_y)
			if dist_x < step and dist_y < step then
				go.set_position(vmath.vector3(target_x, target_y, 1))
				self.player_x = self.player_x + self.moving.x
				self.player_y = self.player_y + self.moving.y
				self.moving = nil
			end
		else
			self.player_x = self.player_x + self.moving.x
			self.player_y = self.player_y + self.moving.y
			self.moving = nil
			go.set_position(vmath.vector3((self.player_x * 64) - 32, (self.player_y * 64) - 32, 1))
		end
	end
	for key, enemy in ipairs(self.enemies) do
		if not enemy.moving then
			if enemy.facing == 1 then
				local step = get_step_up(self, big_step, enemy.x, enemy.y)
				if step then
					enemy.moving = {x = 0, y = step}
					enemy.facing = 4
				else
					step = get_step_left(self, big_step, enemy.x, enemy.y)
					if step then
						enemy.moving = {x = -step, y = 0}
						enemy.facing = 1
					else
						step = get_step_down(self, big_step, enemy.x, enemy.y)
						if step then
							enemy.moving = {x = 0, y = -step}
							enemy.facing = 2
						else
							step = get_step_right(self, big_step, enemy.x, enemy.y)
							if step then
								enemy.moving = {x = step, y = 0}
								enemy.facing = 3
							end
						end
					end
				end
			elseif enemy.facing == 2 then
				local step = get_step_left(self, big_step, enemy.x, enemy.y)
				if step then
					enemy.moving = {x = -step, y = 0}
					enemy.facing = 1
				else
					step = get_step_down(self, big_step, enemy.x, enemy.y)
					if step then
						enemy.moving = {x = 0, y = -step}
						enemy.facing = 2
					else
						step = get_step_right(self, big_step, enemy.x, enemy.y)
						if step then
							enemy.moving = {x = step, y = 0}
							enemy.facing = 3
						else
							step = get_step_up(self, big_step, enemy.x, enemy.y)
							if step then
								enemy.moving = {x = 0, y = step}
								enemy.facing = 4
							end
						end
					end
				end
			elseif enemy.facing == 3 then
				local step = get_step_down(self, big_step, enemy.x, enemy.y)
				if step then
					enemy.moving = {x = 0, y = -step}
					enemy.facing = 2
				else
					step = get_step_right(self, big_step, enemy.x, enemy.y)
					if step then
						enemy.moving = {x = step, y = 0}
						enemy.facing = 3
					else
						step = get_step_up(self, big_step, enemy.x, enemy.y)
						if step then
							enemy.moving = {x = 0, y = step}
							enemy.facing = 4
						else
							step = get_step_left(self, big_step, enemy.x, enemy.y)
							if step then
								enemy.moving = {x = -step, y = 0}
								enemy.facing = 1
							end
						end
					end
				end
			elseif enemy.facing == 4 then
				local step = get_step_right(self, big_step, enemy.x, enemy.y)
				if step then
					enemy.moving = {x = step, y = 0}
					enemy.facing = 3
				else
					step = get_step_up(self, big_step, enemy.x, enemy.y)
					if step then
						enemy.moving = {x = 0, y = step}
						enemy.facing = 4
					else
						step = get_step_left(self, big_step, enemy.x, enemy.y)
						if step then
							enemy.moving = {x = -step, y = 0}
							enemy.facing = 1
						else
							step = get_step_down(self, big_step, enemy.x, enemy.y)
							if step then
								enemy.moving = {x = 0, y = -step}
								enemy.facing = 2
							end
						end
					end
				end
			end
		end
		if enemy.moving then
			if not (freq_list[self.freq] < 4) then
				local pos = go.get_world_position(enemy.go)
				local target_x = ((enemy.x + enemy.moving.x) * 64) - 32
				local dist_x = math.abs(pos.x - target_x)
				local target_y = ((enemy.y + enemy.moving.y) * 64) - 32
				local dist_y = math.abs(pos.y - target_y)
				local step = 256 / freq_list[self.freq]
				go.set_position(vmath.vector3(pos.x + step * enemy.moving.x, pos.y + step * enemy.moving.y, 1), enemy.go)
				target_x = ((enemy.x + enemy.moving.x) * 64) - 32
				dist_x = math.abs(pos.x - target_x)
				target_y = ((enemy.y + enemy.moving.y) * 64) - 32
				dist_y = math.abs(pos.y - target_y)
				if dist_x < step and dist_y < step then
					go.set_position(vmath.vector3(target_x, target_y, 1), enemy.go)
					enemy.x = enemy.x + enemy.moving.x
					enemy.y = enemy.y + enemy.moving.y
					enemy.moving = nil
				end
			else
				enemy.x = enemy.x + enemy.moving.x
				enemy.y = enemy.y + enemy.moving.y
				enemy.moving = nil
				go.set_position(vmath.vector3((enemy.x * 64) - 32, (enemy.y * 64) - 32, 1), enemy.go)
			end
		end
	end
end

local function switch_graphics(self, state)
	if state == nil then
		self.RTX_on = not self.RTX_on
	else
		self.RTX_on = state
	end
	tilemap.set_visible("world#tilemap", "gfx", self.RTX_on)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.movement_vector = vmath.vector3(0, 0, 0)
	self.enemies = {}
	switch_graphics(self, self.RTX_on)
	INPUT.inputs = {}
	msg.post("/gui", hash("change_frequency"), {freq = freq_list[self.freq]})

	local tiles = {
		[0] = 2, [19] = 4
	}
	for x = 1, 20 do
		for y = 1, 12 do
			local tile = tilemap.get_tile("world#tilemap", "gfx", x, y)
			tilemap.set_tile("world#tilemap", "layer", x, y, tiles[tile] or 1)
		end
	end
	go.set_position(vmath.vector3((self.player_x * 64) - 32, (self.player_y * 64) - 32, 1))
end

function on_input(self, action_id, action)
	if action_id then
		local key_pressed = INPUT.key[action_id]
		if action.pressed and not self.moving then
			if key_pressed == hash("speed_up") then
				if freq_list[self.freq - 1] then
					self.freq = self.freq - 1
				end
				msg.post("/gui", hash("change_frequency"), {freq = freq_list[self.freq]})
			elseif key_pressed == hash("slow_down") then
				if freq_list[self.freq + 1] then
					self.freq = self.freq + 1
				end
				msg.post("/gui", hash("change_frequency"), {freq = freq_list[self.freq]})
			end
		end
		if key_pressed then
			INPUT.inputs[key_pressed] = action.pressed or not action.released
		end
	end
end

function update(self, dt)
	if self.frame then
		self.frame = self.frame + 1
		if self.frame % (64 / freq_list[self.freq]) + 1 == 1 then
			upd(self)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("delete_level") then
		go.delete("world")
		go.delete()
	elseif message_id == hash("start") then
		self.frame = 0
	elseif message_id == hash("enemy_spawned") then
		table.insert(self.enemies, {go = message.go, x = message.x, y = message.y, facing = 1})
	elseif message_id == hash("collision_response") then
		if message.other_group == hash("exit") and not self.finished then
			self.finished = true
			msg.post("/gui#menu", hash("level_complete"))
		elseif message.other_group == hash("enemy") then
			print("ouch!")
		end
	elseif message_id == hash("contact_point_response") then

	elseif message_id == hash("trigger_response") then

	end
end